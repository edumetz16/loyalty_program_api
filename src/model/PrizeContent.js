/**
 * Loyalty Program API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.2
 * Contact: eduardo@linead.com.ar
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Step'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Step'));
  } else {
    // Browser globals (root is window)
    if (!root.LoyaltyProgramApi) {
      root.LoyaltyProgramApi = {};
    }
    root.LoyaltyProgramApi.PrizeContent = factory(root.LoyaltyProgramApi.ApiClient, root.LoyaltyProgramApi.Step);
  }
}(this, function(ApiClient, Step) {
  'use strict';




  /**
   * The PrizeContent model module.
   * @module model/PrizeContent
   * @version 4.0.2
   */

  /**
   * Constructs a new <code>PrizeContent</code>.
   * @alias module:model/PrizeContent
   * @class
   * @param steps {Array.<module:model/Step>} 
   * @param buttonText {String} Button label
   * @param buttonURL {String} URL to call when tapping the button
   */
  var exports = function(steps, buttonText, buttonURL) {
    var _this = this;


    _this['steps'] = steps;




    _this['buttonText'] = buttonText;
    _this['buttonURL'] = buttonURL;
  };

  /**
   * Constructs a <code>PrizeContent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PrizeContent} obj Optional instance to populate.
   * @return {module:model/PrizeContent} The populated <code>PrizeContent</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('steps')) {
        obj['steps'] = ApiClient.convertToType(data['steps'], [Step]);
      }
      if (data.hasOwnProperty('codeType')) {
        obj['codeType'] = ApiClient.convertToType(data['codeType'], 'String');
      }
      if (data.hasOwnProperty('code')) {
        obj['code'] = ApiClient.convertToType(data['code'], 'String');
      }
      if (data.hasOwnProperty('displayCodeAfter')) {
        obj['displayCodeAfter'] = ApiClient.convertToType(data['displayCodeAfter'], 'String');
      }
      if (data.hasOwnProperty('information')) {
        obj['information'] = ApiClient.convertToType(data['information'], 'String');
      }
      if (data.hasOwnProperty('buttonText')) {
        obj['buttonText'] = ApiClient.convertToType(data['buttonText'], 'String');
      }
      if (data.hasOwnProperty('buttonURL')) {
        obj['buttonURL'] = ApiClient.convertToType(data['buttonURL'], 'String');
      }
    }
    return obj;
  }

  /**
   * Prize title to display
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * @member {Array.<module:model/Step>} steps
   */
  exports.prototype['steps'] = undefined;
  /**
   * Type of code behavior, can be static or dynamic.
   * @member {String} codeType
   */
  exports.prototype['codeType'] = undefined;
  /**
   * Code to be displayed
   * @member {String} code
   */
  exports.prototype['code'] = undefined;
  /**
   * After which step should the code be displayed.
   * @member {String} displayCodeAfter
   */
  exports.prototype['displayCodeAfter'] = undefined;
  /**
   * Optional information to display at the end of the content
   * @member {String} information
   */
  exports.prototype['information'] = undefined;
  /**
   * Button label
   * @member {String} buttonText
   */
  exports.prototype['buttonText'] = undefined;
  /**
   * URL to call when tapping the button
   * @member {String} buttonURL
   */
  exports.prototype['buttonURL'] = undefined;



  return exports;
}));


