/**
 * Loyalty Program API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.2
 * Contact: eduardo@linead.com.ar
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CategoryRequest', 'model/ChangeInformationResponse', 'model/ChangePassword', 'model/City', 'model/ClubRequest', 'model/ClubUserRequest', 'model/ClubUserbyIDRequest', 'model/ContactForm', 'model/ContactResponse', 'model/CreditDetails', 'model/CreditsResponse', 'model/DeviceInfo', 'model/EmailVoucher', 'model/ExchangeId', 'model/Exchanges', 'model/LoginResponse', 'model/Modules', 'model/NewsDetail', 'model/NewsItem', 'model/NewsRequest', 'model/NewsTags', 'model/NewsUsers', 'model/ObjectRequest', 'model/PaymentDetails', 'model/Points', 'model/Premios', 'model/PrizeContent', 'model/PrizeRedeemRequest', 'model/PrizeRequest', 'model/PrizeViewRequest', 'model/Province', 'model/RedemptionConfirm', 'model/Redemptions', 'model/RedemptionsRequest', 'model/Rubros', 'model/SliderImages', 'model/Subsidiaries', 'model/SubsidiariesCitymarketing', 'model/Sweepstake', 'model/SweepstakeDetails', 'model/SweepstakeUser', 'model/SweepstakeUserResponse', 'model/TagRequest', 'model/TaggedUser', 'model/TicketResponse', 'model/User', 'model/UserCheckResponse', 'model/UserDeviceInfo', 'model/UserInformation', 'model/UserLoginRequest', 'model/UserNews', 'model/ValidateMailRequest', 'model/ValidateMailResponse', 'model/Vouchers'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CategoryRequest'), require('../model/ChangeInformationResponse'), require('../model/ChangePassword'), require('../model/City'), require('../model/ClubRequest'), require('../model/ClubUserRequest'), require('../model/ClubUserbyIDRequest'), require('../model/ContactForm'), require('../model/ContactResponse'), require('../model/CreditDetails'), require('../model/CreditsResponse'), require('../model/DeviceInfo'), require('../model/EmailVoucher'), require('../model/ExchangeId'), require('../model/Exchanges'), require('../model/LoginResponse'), require('../model/Modules'), require('../model/NewsDetail'), require('../model/NewsItem'), require('../model/NewsRequest'), require('../model/NewsTags'), require('../model/NewsUsers'), require('../model/ObjectRequest'), require('../model/PaymentDetails'), require('../model/Points'), require('../model/Premios'), require('../model/PrizeContent'), require('../model/PrizeRedeemRequest'), require('../model/PrizeRequest'), require('../model/PrizeViewRequest'), require('../model/Province'), require('../model/RedemptionConfirm'), require('../model/Redemptions'), require('../model/RedemptionsRequest'), require('../model/Rubros'), require('../model/SliderImages'), require('../model/Subsidiaries'), require('../model/SubsidiariesCitymarketing'), require('../model/Sweepstake'), require('../model/SweepstakeDetails'), require('../model/SweepstakeUser'), require('../model/SweepstakeUserResponse'), require('../model/TagRequest'), require('../model/TaggedUser'), require('../model/TicketResponse'), require('../model/User'), require('../model/UserCheckResponse'), require('../model/UserDeviceInfo'), require('../model/UserInformation'), require('../model/UserLoginRequest'), require('../model/UserNews'), require('../model/ValidateMailRequest'), require('../model/ValidateMailResponse'), require('../model/Vouchers'));
  } else {
    // Browser globals (root is window)
    if (!root.LoyaltyProgramApi) {
      root.LoyaltyProgramApi = {};
    }
    root.LoyaltyProgramApi.DevelopersApi = factory(root.LoyaltyProgramApi.ApiClient, root.LoyaltyProgramApi.CategoryRequest, root.LoyaltyProgramApi.ChangeInformationResponse, root.LoyaltyProgramApi.ChangePassword, root.LoyaltyProgramApi.City, root.LoyaltyProgramApi.ClubRequest, root.LoyaltyProgramApi.ClubUserRequest, root.LoyaltyProgramApi.ClubUserbyIDRequest, root.LoyaltyProgramApi.ContactForm, root.LoyaltyProgramApi.ContactResponse, root.LoyaltyProgramApi.CreditDetails, root.LoyaltyProgramApi.CreditsResponse, root.LoyaltyProgramApi.DeviceInfo, root.LoyaltyProgramApi.EmailVoucher, root.LoyaltyProgramApi.ExchangeId, root.LoyaltyProgramApi.Exchanges, root.LoyaltyProgramApi.LoginResponse, root.LoyaltyProgramApi.Modules, root.LoyaltyProgramApi.NewsDetail, root.LoyaltyProgramApi.NewsItem, root.LoyaltyProgramApi.NewsRequest, root.LoyaltyProgramApi.NewsTags, root.LoyaltyProgramApi.NewsUsers, root.LoyaltyProgramApi.ObjectRequest, root.LoyaltyProgramApi.PaymentDetails, root.LoyaltyProgramApi.Points, root.LoyaltyProgramApi.Premios, root.LoyaltyProgramApi.PrizeContent, root.LoyaltyProgramApi.PrizeRedeemRequest, root.LoyaltyProgramApi.PrizeRequest, root.LoyaltyProgramApi.PrizeViewRequest, root.LoyaltyProgramApi.Province, root.LoyaltyProgramApi.RedemptionConfirm, root.LoyaltyProgramApi.Redemptions, root.LoyaltyProgramApi.RedemptionsRequest, root.LoyaltyProgramApi.Rubros, root.LoyaltyProgramApi.SliderImages, root.LoyaltyProgramApi.Subsidiaries, root.LoyaltyProgramApi.SubsidiariesCitymarketing, root.LoyaltyProgramApi.Sweepstake, root.LoyaltyProgramApi.SweepstakeDetails, root.LoyaltyProgramApi.SweepstakeUser, root.LoyaltyProgramApi.SweepstakeUserResponse, root.LoyaltyProgramApi.TagRequest, root.LoyaltyProgramApi.TaggedUser, root.LoyaltyProgramApi.TicketResponse, root.LoyaltyProgramApi.User, root.LoyaltyProgramApi.UserCheckResponse, root.LoyaltyProgramApi.UserDeviceInfo, root.LoyaltyProgramApi.UserInformation, root.LoyaltyProgramApi.UserLoginRequest, root.LoyaltyProgramApi.UserNews, root.LoyaltyProgramApi.ValidateMailRequest, root.LoyaltyProgramApi.ValidateMailResponse, root.LoyaltyProgramApi.Vouchers);
  }
}(this, function(ApiClient, CategoryRequest, ChangeInformationResponse, ChangePassword, City, ClubRequest, ClubUserRequest, ClubUserbyIDRequest, ContactForm, ContactResponse, CreditDetails, CreditsResponse, DeviceInfo, EmailVoucher, ExchangeId, Exchanges, LoginResponse, Modules, NewsDetail, NewsItem, NewsRequest, NewsTags, NewsUsers, ObjectRequest, PaymentDetails, Points, Premios, PrizeContent, PrizeRedeemRequest, PrizeRequest, PrizeViewRequest, Province, RedemptionConfirm, Redemptions, RedemptionsRequest, Rubros, SliderImages, Subsidiaries, SubsidiariesCitymarketing, Sweepstake, SweepstakeDetails, SweepstakeUser, SweepstakeUserResponse, TagRequest, TaggedUser, TicketResponse, User, UserCheckResponse, UserDeviceInfo, UserInformation, UserLoginRequest, UserNews, ValidateMailRequest, ValidateMailResponse, Vouchers) {
  'use strict';

  /**
   * Developers service.
   * @module api/DevelopersApi
   * @version 4.0.2
   */

  /**
   * Constructs a new DevelopersApi. 
   * @alias module:api/DevelopersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the associateFCMId operation.
     * @callback module:api/DevelopersApi~associateFCMIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * associate fcm id
     * Associate FCM device ID to a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDeviceInfo} opts.deviceInfo device information object
     * @param {module:api/DevelopersApi~associateFCMIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.associateFCMId = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['deviceInfo'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/gcm_id/asociar_gcm_id.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buildPrize operation.
     * @callback module:api/DevelopersApi~buildPrizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrizeContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * builds prize content
     * Builds inner prize content for behavior 3
     * @param {Object} opts Optional parameters
     * @param {module:model/PrizeRequest} opts.prizeRequest Request prize content
     * @param {module:api/DevelopersApi~buildPrizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrizeContent}
     */
    this.buildPrize = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['prizeRequest'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PrizeContent;

      return this.apiClient.callApi(
        '/android-build_prize.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeInfo operation.
     * @callback module:api/DevelopersApi~changeInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeInformationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * change user&#39;s info.
     * Change user&#39;s account information
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInformation} opts.userInformation user information object
     * @param {module:api/DevelopersApi~changeInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeInformationResponse}
     */
    this.changeInfo = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['userInformation'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChangeInformationResponse;

      return this.apiClient.callApi(
        '/android-modificar_socio.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/DevelopersApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeInformationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * change password.
     * Change user&#39;s password
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePassword} opts.contactForm contact form object
     * @param {module:api/DevelopersApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeInformationResponse}
     */
    this.changePassword = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['contactForm'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChangeInformationResponse;

      return this.apiClient.callApi(
        '/android-modificar_clave.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUser operation.
     * @callback module:api/DevelopersApi~checkUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verifies the user exists
     * Checks that a user with that identiy card number exists
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserRequest} opts.clubUser User object with identity card number and clubID
     * @param {module:api/DevelopersApi~checkUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCheckResponse}
     */
    this.checkUser = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUser'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserCheckResponse;

      return this.apiClient.callApi(
        '/android-validar_dni.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUser2 operation.
     * @callback module:api/DevelopersApi~checkUser2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verifies the user exists
     * Checks that a user with that identiy card number exists
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserRequest} opts.clubUser User object with identity card number and clubID
     * @param {module:api/DevelopersApi~checkUser2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCheckResponse}
     */
    this.checkUser2 = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUser'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = UserCheckResponse;

      return this.apiClient.callApi(
        '/android-validar_primer_paso.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUserMail operation.
     * @callback module:api/DevelopersApi~checkUserMailCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verifies the user exists
     * Checks that a user with that email exists
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserRequest} opts.clubUser User object with identity card number and clubID
     * @param {module:api/DevelopersApi~checkUserMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.checkUserMail = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUser'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain; charset=utf-8'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/android-verificar_mail_socio.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactForm operation.
     * @callback module:api/DevelopersApi~contactFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send contact form.
     * Send a contact form
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactForm} opts.contactForm contact form object
     * @param {module:api/DevelopersApi~contactFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactResponse}
     */
    this.contactForm = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['contactForm'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactResponse;

      return this.apiClient.callApi(
        '/android-enviar_formulario_contacto.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dettachFMCId operation.
     * @callback module:api/DevelopersApi~dettachFMCIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * associate fcm id
     * Associate FCM device ID to a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDeviceInfo} opts.deviceInfo device information object
     * @param {module:api/DevelopersApi~dettachFMCIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dettachFMCId = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['deviceInfo'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/gcm_id/desloguear_socio.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategories operation.
     * @callback module:api/DevelopersApi~getCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rubros} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the categories of prizes
     * Gets a list of categories with prizes.
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubRequest} opts.club Club ID
     * @param {module:api/DevelopersApi~getCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rubros}
     */
    this.getCategories = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['club'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rubros;

      return this.apiClient.callApi(
        '/android-obtener_rubros.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCities operation.
     * @callback module:api/DevelopersApi~getCitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/City>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of cities.
     * Get a list of cities.
     * @param {Object} opts Optional parameters
     * @param {String} opts.idProvincia time utc
     * @param {module:api/DevelopersApi~getCitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/City>}
     */
    this.getCities = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'idProvincia': opts['idProvincia'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [City];

      return this.apiClient.callApi(
        '/get-cities.php', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredits operation.
     * @callback module:api/DevelopersApi~getCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get credits.
     * Get an array of credits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fkSocio id socio
     * @param {module:api/DevelopersApi~getCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditsResponse}
     */
    this.getCredits = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fk_socio': opts['fkSocio'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CreditsResponse;

      return this.apiClient.callApi(
        '/creditos/cmb_creditos.inc.php', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditsDetails operation.
     * @callback module:api/DevelopersApi~getCreditsDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get credit details.
     * Get credit details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id id credito
     * @param {module:api/DevelopersApi~getCreditsDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditDetails}
     */
    this.getCreditsDetails = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CreditDetails;

      return this.apiClient.callApi(
        '/creditos/leer_credito.inc.php', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExchangeTicket operation.
     * @callback module:api/DevelopersApi~getExchangeTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TicketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets user information
     * Gets information about the user from the userID and clubID
     * @param {Object} opts Optional parameters
     * @param {module:model/ExchangeId} opts.exchangeId Sends userID and clubID to obtain user information.
     * @param {module:api/DevelopersApi~getExchangeTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TicketResponse}
     */
    this.getExchangeTicket = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['exchangeId'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TicketResponse;

      return this.apiClient.callApi(
        '/android-ticket.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMiles operation.
     * @callback module:api/DevelopersApi~getMilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Points} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets miles
     * Gets miles earned
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserbyIDRequest} opts.clubUserbyID Sends userID and clubID to obtain user information.
     * @param {module:api/DevelopersApi~getMilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Points}
     */
    this.getMiles = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUserbyID'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Points;

      return this.apiClient.callApi(
        '/android-leer_millas.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMilesDetails operation.
     * @callback module:api/DevelopersApi~getMilesDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exchanges} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets miles detail
     * Gets miles movement list
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserbyIDRequest} opts.clubUserbyID Sends userID and clubID to obtain user information.
     * @param {module:api/DevelopersApi~getMilesDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exchanges}
     */
    this.getMilesDetails = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUserbyID'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exchanges;

      return this.apiClient.callApi(
        '/android-movimiento_de_millas.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModules operation.
     * @callback module:api/DevelopersApi~getModulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Modules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get app configuration.
     * Get an object for app configuration.
     * @param {module:api/DevelopersApi~getModulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Modules}
     */
    this.getModules = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Modules;

      return this.apiClient.callApi(
        '/android-leer_modulos.php', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNews operation.
     * @callback module:api/DevelopersApi~getNewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NewsItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get news for a tagged user
     * gets news for a specific tag
     * @param {Object} opts Optional parameters
     * @param {module:model/TaggedUser} opts.taggedUser TaggedUser
     * @param {module:api/DevelopersApi~getNewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NewsItem>}
     */
    this.getNews = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['taggedUser'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NewsItem];

      return this.apiClient.callApi(
        '/noticias/buscar_noticias_etiquetados.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsDetails operation.
     * @callback module:api/DevelopersApi~getNewsDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewsDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get news article details.
     * Get details from a news article by its id
     * @param {Object} opts Optional parameters
     * @param {module:model/NewsRequest} opts.userInformation user information object
     * @param {module:api/DevelopersApi~getNewsDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewsDetail}
     */
    this.getNewsDetails = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['userInformation'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NewsDetail;

      return this.apiClient.callApi(
        '/noticias/leer_noticia.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsList operation.
     * @callback module:api/DevelopersApi~getNewsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NewsItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get news list.
     * Get list of news
     * @param {Object} opts Optional parameters
     * @param {module:model/UserNews} opts.userInformation user information object
     * @param {module:api/DevelopersApi~getNewsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NewsItem>}
     */
    this.getNewsList = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['userInformation'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NewsItem];

      return this.apiClient.callApi(
        '/noticias/anticipo_noticias.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsWithTag operation.
     * @callback module:api/DevelopersApi~getNewsWithTagCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NewsItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get news for a tag
     * gets news for a specific tag
     * @param {Object} opts Optional parameters
     * @param {module:model/TagRequest} opts.tag tag
     * @param {module:api/DevelopersApi~getNewsWithTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NewsItem>}
     */
    this.getNewsWithTag = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['tag'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NewsItem];

      return this.apiClient.callApi(
        '/noticias/buscar_noticias_tag.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsWithUser operation.
     * @callback module:api/DevelopersApi~getNewsWithUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NewsUsers>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get news for a user
     * gets news for a specific user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDeviceInfo} opts.tag user
     * @param {module:api/DevelopersApi~getNewsWithUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NewsUsers>}
     */
    this.getNewsWithUser = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['tag'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NewsUsers];

      return this.apiClient.callApi(
        '/noticias/leer_etiquetados_segmentado.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPoints operation.
     * @callback module:api/DevelopersApi~getPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Points} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets user information
     * Gets information about the user from the userID and clubID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserbyIDRequest} opts.clubUserbyID Sends userID and clubID to obtain user information.
     * @param {module:api/DevelopersApi~getPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Points}
     */
    this.getPoints = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUserbyID'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Points;

      return this.apiClient.callApi(
        '/android-leer_puntos.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPointsDetails operation.
     * @callback module:api/DevelopersApi~getPointsDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exchanges} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets user information
     * Gets information about the user from the userID and clubID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserbyIDRequest} opts.clubUserbyID Sends userID and clubID to obtain user information.
     * @param {module:api/DevelopersApi~getPointsDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exchanges}
     */
    this.getPointsDetails = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUserbyID'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exchanges;

      return this.apiClient.callApi(
        '/android-movimiento_de_puntos.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrizesFromCategory operation.
     * @callback module:api/DevelopersApi~getPrizesFromCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Premios} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get prizes from category
     * Gets a list of prizes from a certaing category.
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryRequest} opts.categoryPrizesRequest Request prizes from categories Object
     * @param {module:api/DevelopersApi~getPrizesFromCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Premios}
     */
    this.getPrizesFromCategory = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['categoryPrizesRequest'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Premios;

      return this.apiClient.callApi(
        '/android-obtener_premios_del_rubro.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvinces operation.
     * @callback module:api/DevelopersApi~getProvincesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Province>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of provinces.
     * Get a list of provinces.
     * @param {module:api/DevelopersApi~getProvincesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Province>}
     */
    this.getProvinces = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Province];

      return this.apiClient.callApi(
        '/get-provinces.php', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRedemptions operation.
     * @callback module:api/DevelopersApi~getRedemptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Redemptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of redemptions.
     * Get a list of redeemed prizes.
     * @param {Object} opts Optional parameters
     * @param {module:model/RedemptionsRequest} opts.redemptionsRequest redemptions request object
     * @param {module:api/DevelopersApi~getRedemptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redemptions}
     */
    this.getRedemptions = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['redemptionsRequest'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Redemptions;

      return this.apiClient.callApi(
        '/android-obtener_canjes.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSliderImages operation.
     * @callback module:api/DevelopersApi~getSliderImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SliderImages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get slider images
     * Gets the images of the slider in the home screen.
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubRequest} opts.club Club ID
     * @param {module:api/DevelopersApi~getSliderImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SliderImages}
     */
    this.getSliderImages = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['club'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SliderImages;

      return this.apiClient.callApi(
        '/android-obtener_imagenes_slide.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubsidiaries operation.
     * @callback module:api/DevelopersApi~getSubsidiariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subsidiaries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get subsidiaries
     * Gets a list of subsidiaries.
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubRequest} opts.club Club ID
     * @param {module:api/DevelopersApi~getSubsidiariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subsidiaries}
     */
    this.getSubsidiaries = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['club'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Subsidiaries;

      return this.apiClient.callApi(
        '/android-sucursales_club.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubsidiariesCitymarketing operation.
     * @callback module:api/DevelopersApi~getSubsidiariesCitymarketingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubsidiariesCitymarketing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get subsidiaries list details
     * Gets a list of subsidiaries with city details.
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubRequest} opts.club Club ID
     * @param {module:api/DevelopersApi~getSubsidiariesCitymarketingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubsidiariesCitymarketing}
     */
    this.getSubsidiariesCitymarketing = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['club'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubsidiariesCitymarketing;

      return this.apiClient.callApi(
        '/android-obtener_sucursales_citymarketing.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubsidiariesList operation.
     * @callback module:api/DevelopersApi~getSubsidiariesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subsidiaries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get subsidiaries list details
     * Gets a list of subsidiaries with details.
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubRequest} opts.club Club ID
     * @param {module:api/DevelopersApi~getSubsidiariesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subsidiaries}
     */
    this.getSubsidiariesList = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['club'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Subsidiaries;

      return this.apiClient.callApi(
        '/android-obtener_sucursales.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSweepstakeDetails operation.
     * @callback module:api/DevelopersApi~getSweepstakeDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SweepstakeDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get sweepstake details
     * Get details of a specific sweepstake.
     * @param {Object} opts Optional parameters
     * @param {module:model/ObjectRequest} opts.sweepstakeId sweepstake object
     * @param {module:api/DevelopersApi~getSweepstakeDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SweepstakeDetails}
     */
    this.getSweepstakeDetails = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['sweepstakeId'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SweepstakeDetails;

      return this.apiClient.callApi(
        '/concursos/leer_concurso.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSweepstakes operation.
     * @callback module:api/DevelopersApi~getSweepstakesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Sweepstake>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get sweepstakes.
     * Get Availble Sweepstakes.
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserbyIDRequest} opts.clubUser club user object
     * @param {module:api/DevelopersApi~getSweepstakesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Sweepstake>}
     */
    this.getSweepstakes = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUser'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Sweepstake];

      return this.apiClient.callApi(
        '/concursos/leer_concursos_vigentes.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsWithUser operation.
     * @callback module:api/DevelopersApi~getTagsWithUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NewsTags>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get tag
     * gets tags for a specific user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDeviceInfo} opts.tag user
     * @param {module:api/DevelopersApi~getTagsWithUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NewsTags>}
     */
    this.getTagsWithUser = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['tag'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NewsTags];

      return this.apiClient.callApi(
        '/noticias/leer_tags_segmentados.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUnreadNews operation.
     * @callback module:api/DevelopersApi~getUnreadNewsCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get unread news.
     * Get number of unread news
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDeviceInfo} opts.userInformation user information object
     * @param {module:api/DevelopersApi~getUnreadNewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.getUnreadNews = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['userInformation'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/noticias/cantidad_noticias_sin_leer.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserInfo operation.
     * @callback module:api/DevelopersApi~getUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets user information
     * Gets information about the user from the userID and clubID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserbyIDRequest} opts.clubUserbyID Sends userID and clubID to obtain user information.
     * @param {module:api/DevelopersApi~getUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUserInfo = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUserbyID'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/android-socios.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVouchers operation.
     * @callback module:api/DevelopersApi~getVouchersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vouchers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of vouchers.
     * Get a list of redeemed prizes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._date time utc
     * @param {module:api/DevelopersApi~getVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vouchers}
     */
    this.getVouchers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date': opts['_date'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vouchers;

      return this.apiClient.callApi(
        '/android-traer_cupones.php', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the joinSweepstake operation.
     * @callback module:api/DevelopersApi~joinSweepstakeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SweepstakeUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * join sweepstake
     * Join a user to a sweepstake.
     * @param {Object} opts Optional parameters
     * @param {module:model/SweepstakeUser} opts.prizeView prize view object
     * @param {module:api/DevelopersApi~joinSweepstakeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SweepstakeUserResponse}
     */
    this.joinSweepstake = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['prizeView'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SweepstakeUserResponse;

      return this.apiClient.callApi(
        '/concursos/participar_concurso.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback module:api/DevelopersApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * logs the user in
     * Checks that a user with that identity card number exists
     * @param {Object} opts Optional parameters
     * @param {module:model/UserLoginRequest} opts.clubUser Sends identity card number and password to log the user in
     * @param {module:api/DevelopersApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    this.loginUser = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUser'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LoginResponse;

      return this.apiClient.callApi(
        '/android-login.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the prizePaymentDetails operation.
     * @callback module:api/DevelopersApi~prizePaymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get payment details for prize
     * Gets the details to submit a payment for a specific prize.
     * @param {Object} opts Optional parameters
     * @param {module:model/PrizeRequest} opts.prizeRequest Request prize content
     * @param {module:api/DevelopersApi~prizePaymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentDetails}
     */
    this.prizePaymentDetails = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['prizeRequest'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentDetails;

      return this.apiClient.callApi(
        '/android-prize_payment_details.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverPassword operation.
     * @callback module:api/DevelopersApi~recoverPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * recover password
     * Sends the user the password to his email address
     * @param {Object} opts Optional parameters
     * @param {module:model/ClubUserRequest} opts.clubUser Sends identity card number and password to log the user in
     * @param {module:api/DevelopersApi~recoverPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    this.recoverPassword = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['clubUser'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LoginResponse;

      return this.apiClient.callApi(
        '/android-recordatorio_clave.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the redeemVoucher operation.
     * @callback module:api/DevelopersApi~redeemVoucherCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * redeem voucher.
     * Redeem a Voucher using an email address.
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailVoucher} opts.emailVoucher email to get voucher
     * @param {module:api/DevelopersApi~redeemVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.redeemVoucher = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['emailVoucher'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain; charset=utf-8'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/android-descarga_cupon.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerFCMId operation.
     * @callback module:api/DevelopersApi~registerFCMIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * register fcm id
     * Register a device&#39;s ID for push notifications.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceInfo} opts.deviceInfo device information object
     * @param {module:api/DevelopersApi~registerFCMIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registerFCMId = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['deviceInfo'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/gcm_id/registro_gcm_id.inc.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerPrizeVisit operation.
     * @callback module:api/DevelopersApi~registerPrizeVisitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * register visit to prize
     * Register a user&#39;s visit to a prize in the application.
     * @param {Object} opts Optional parameters
     * @param {module:model/PrizeViewRequest} opts.prizeView prize view object
     * @param {module:api/DevelopersApi~registerPrizeVisitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registerPrizeVisit = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['prizeView'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/android-registrar_visita_premio.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/DevelopersApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new user
     * Creates a new user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInformation} opts.socio Sends all the information set by the user
     * @param {module:api/DevelopersApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    this.registerUser = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['socio'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LoginResponse;

      return this.apiClient.callApi(
        '/android-alta_socio.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reservePrize operation.
     * @callback module:api/DevelopersApi~reservePrizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RedemptionConfirm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reserve a prize.
     * Reserve a priz for the usere and generate the redemtion code.
     * @param {Object} opts Optional parameters
     * @param {module:model/PrizeRedeemRequest} opts.prizeRedeemRequest prize redeem request object
     * @param {module:api/DevelopersApi~reservePrizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RedemptionConfirm}
     */
    this.reservePrize = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['prizeRedeemRequest'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RedemptionConfirm;

      return this.apiClient.callApi(
        '/android-reserva_premio_beneficio.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserEmail operation.
     * @callback module:api/DevelopersApi~setUserEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateMailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * associates an email address to a user
     * Checks that a user with that identiy card number exists
     * @param {Object} opts Optional parameters
     * @param {module:model/ValidateMailRequest} opts.validateMailRequest User object with identity card number and clubID
     * @param {module:api/DevelopersApi~setUserEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateMailResponse}
     */
    this.setUserEmail = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['validateMailRequest'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ValidateMailResponse;

      return this.apiClient.callApi(
        '/android-validar_mail.php', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
